generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ability_points {
  id              BigInt                   @id @default(dbgenerated("generate_numeric_id(15)"))
  slug            String                   @unique @db.Citext
  domain_zh       String                   @default("")
  domain_en       String                   @default("")
  name_zh         String                   @default("")
  name_en         String                   @default("")
  description_zh  String?
  description_en  String?
  aliases         Json                     @default("{}")
  tags            Json                     @default("{}")
  search_text_tsv Unsupported("tsvector")?
  deleted_at      DateTime?                @db.Timestamptz(6)
  created_at      DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                 @default(now()) @db.Timestamptz(6)

  @@index([aliases], map: "idx_ability_points_aliases", type: Gin)
  @@index([search_text_tsv], map: "idx_ability_points_search", type: Gin)
  @@index([tags], map: "idx_ability_points_tags", type: Gin)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auth_accounts {
  id                  BigInt   @id @default(dbgenerated("generate_numeric_id(12)"))
  user_id             BigInt
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  encryption_type     String?
  version             Int      @default(1)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  users               users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_account_id])
  @@index([provider], map: "idx_auth_accounts_provider")
  @@index([user_id], map: "idx_auth_accounts_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auth_sessions {
  id            BigInt   @id @default(dbgenerated("generate_numeric_id(12)"))
  session_token String   @unique
  user_id       BigInt
  expires       DateTime @db.Timestamptz(6)
  user_agent    String?
  ip_address    String?  @db.VarChar(50)
  device_id     String?  @db.VarChar(100)
  is_mobile     Boolean?
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires], map: "idx_auth_sessions_expires")
  @@index([user_id], map: "idx_auth_sessions_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auth_verification_tokens {
  identifier String
  token      String    @unique
  expires    DateTime  @db.Timestamptz(6)
  type       TokenType
  used       Boolean   @default(false)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  created_ip String?   @db.VarChar(50)

  @@unique([identifier, token])
  @@index([expires], map: "idx_auth_verification_tokens_expires")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model credentials {
  id              BigInt         @id @default(dbgenerated("generate_numeric_id(12)"))
  user_id         BigInt
  type            CredentialType
  value           String
  salt            String?
  encryption_type String?
  expires_at      DateTime?      @db.Timestamptz(6)
  failed_attempts Int            @default(0)
  last_failed_at  DateTime?      @db.Timestamptz(6)
  locked_until    DateTime?      @db.Timestamptz(6)
  version         Int            @default(1)
  created_ip      String?        @db.VarChar(50)
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime       @default(now()) @db.Timestamptz(6)
  users           users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, type])
  @@index([type], map: "idx_credentials_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model knowledge_points {
  id                BigInt                   @id @default(dbgenerated("generate_numeric_id(15)"))
  slug              String                   @unique @db.Citext
  name_zh           String                   @default("")
  name_en           String                   @default("")
  definition_zh     String?
  definition_en     String?
  aliases           Json                     @default("{}")
  tags              Json                     @default("{}")
  ability_point_ids Json                     @default("[]")
  search_text_tsv   Unsupported("tsvector")?
  deleted_at        DateTime?                @db.Timestamptz(6)
  created_at        DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at        DateTime                 @default(now()) @db.Timestamptz(6)
  question_variants question_variants[]

  @@index([aliases], map: "idx_knowledge_points_aliases", type: Gin)
  @@index([search_text_tsv], map: "idx_knowledge_points_search", type: Gin)
  @@index([tags], map: "idx_knowledge_points_tags", type: Gin)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model question_variants {
  id                         BigInt                   @id @default(dbgenerated("generate_numeric_id(15)"))
  type                       String                   @default("open-ended") @db.VarChar(20)
  language                   String?                  @db.VarChar(20)
  difficulty                 String                   @default("medium") @db.VarChar(10)
  source                     String?                  @default("official") @db.VarChar(50)
  primary_knowledge_point_id BigInt
  auxiliary_knowledge_points Json                     @default("[]")
  tags                       Json                     @default("{}")
  title_zh                   String                   @default("")
  title_en                   String                   @default("")
  description_zh             String?
  description_en             String?
  search_text_tsv            Unsupported("tsvector")?
  deleted_at                 DateTime?                @db.Timestamptz(6)
  created_at                 DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime                 @default(now()) @db.Timestamptz(6)
  knowledge_points           knowledge_points         @relation(fields: [primary_knowledge_point_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  standard_answers           standard_answers[]
  user_answers               user_answers[]

  @@index([difficulty], map: "idx_question_variants_difficulty")
  @@index([language], map: "idx_question_variants_language")
  @@index([search_text_tsv], map: "idx_question_variants_search", type: Gin)
  @@index([tags], map: "idx_question_variants_tags", type: Gin)
  @@index([type], map: "idx_question_variants_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model standard_answers {
  id                  BigInt                   @id @default(dbgenerated("generate_numeric_id(15)"))
  question_id         BigInt
  user_id             BigInt?
  is_system           Boolean                  @default(false)
  source              String                   @default("official") @db.VarChar(20)
  is_featured         Boolean?                 @default(false)
  used_as_primary     BigInt?                  @default(0)
  upvotes             BigInt?                  @default(0)
  bookmark            BigInt?                  @default(0)
  answer_type         String?                  @default("explanation") @db.VarChar(20)
  knowledge_point_ids Json                     @default("[]")
  content_zh          String                   @default("")
  content_en          String                   @default("")
  search_text_tsv     Unsupported("tsvector")?
  deleted_at          DateTime?                @db.Timestamptz(6)
  created_at          DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at          DateTime                 @default(now()) @db.Timestamptz(6)
  question_variants   question_variants        @relation(fields: [question_id], references: [id], onUpdate: NoAction)
  users               users?                   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@index([answer_type], map: "idx_standard_answers_answer_type")
  @@index([is_featured], map: "idx_standard_answers_is_featured")
  @@index([knowledge_point_ids], map: "idx_standard_answers_knowledge_points", type: Gin)
  @@index([question_id], map: "idx_standard_answers_question_id")
  @@index([search_text_tsv], map: "idx_standard_answers_search", type: Gin)
  @@index([user_id], map: "idx_standard_answers_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_answers {
  id                BigInt            @id @default(dbgenerated("generate_numeric_id(15)"))
  user_id           BigInt
  question_id       BigInt
  input_language    String            @default("zh") @db.VarChar(10)
  audio_url         String?
  transcribed_text  String?
  answer_text       String            @default("")
  quality_score     Decimal?          @default(0.00) @db.Decimal(3, 2)
  score_detail      Json?
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at        DateTime?         @db.Timestamptz(6)
  updated_at        DateTime          @default(now()) @db.Timestamptz(6)
  question_variants question_variants @relation(fields: [question_id], references: [id], onUpdate: NoAction)
  users             users             @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([quality_score], map: "idx_user_answers_quality_score")
  @@index([question_id], map: "idx_user_answers_question_id")
  @@index([user_id], map: "idx_user_answers_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id               BigInt             @id @unique(map: "users_id_unique") @default(dbgenerated("generate_numeric_id(12)"))
  username         String?            @db.VarChar(50)
  nickname         String?            @db.VarChar(50)
  email            String?            @db.VarChar(100)
  phone            String?            @db.VarChar(20)
  email_verified   DateTime?          @db.Timestamptz(6)
  phone_verified   DateTime?          @db.Timestamptz(6)
  avatar           String?
  bio              String?
  status           UserStatus         @default(ACTIVE)
  created_ip       String?            @db.VarChar(50)
  updated_ip       String?            @db.VarChar(50)
  last_login_at    DateTime?          @db.Timestamptz(6)
  extra            Json?              @default("{}")
  deleted_at       DateTime?          @db.Timestamptz(6)
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  auth_accounts    auth_accounts[]
  auth_sessions    auth_sessions[]
  credentials      credentials[]
  standard_answers standard_answers[]
  user_answers     user_answers[]

  @@index([deleted_at], map: "idx_users_deleted_at")
  @@index([status], map: "idx_users_status")
  @@index([username], map: "idx_users_username")
}

enum CredentialType {
  PASSWORD
  PHONE
  EMAIL
  CHANNEL_CODE
}

enum TokenType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LOCKED
  BANNED
}
